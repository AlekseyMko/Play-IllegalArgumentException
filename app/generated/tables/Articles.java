/*
 * This file is generated by jOOQ.
*/
package generated.tables;


import generated.Indexes;
import generated.Keys;
import generated.Test;
import generated.tables.records.ArticlesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Articles extends TableImpl<ArticlesRecord> {

    private static final long serialVersionUID = -755870427;

    /**
     * The reference instance of <code>test.ARTICLES</code>
     */
    public static final Articles ARTICLES = new Articles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticlesRecord> getRecordType() {
        return ArticlesRecord.class;
    }

    /**
     * The column <code>test.ARTICLES.id</code>.
     */
    public final TableField<ArticlesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>test.ARTICLES.text</code>.
     */
    public final TableField<ArticlesRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>test.ARTICLES</code> table reference
     */
    public Articles() {
        this(DSL.name("ARTICLES"), null);
    }

    /**
     * Create an aliased <code>test.ARTICLES</code> table reference
     */
    public Articles(String alias) {
        this(DSL.name(alias), ARTICLES);
    }

    /**
     * Create an aliased <code>test.ARTICLES</code> table reference
     */
    public Articles(Name alias) {
        this(alias, ARTICLES);
    }

    private Articles(Name alias, Table<ArticlesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Articles(Name alias, Table<ArticlesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArticlesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTICLES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticlesRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticlesRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticlesRecord>>asList(Keys.KEY_ARTICLES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Articles as(String alias) {
        return new Articles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Articles as(Name alias) {
        return new Articles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Articles rename(String name) {
        return new Articles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Articles rename(Name name) {
        return new Articles(name, null);
    }
}
